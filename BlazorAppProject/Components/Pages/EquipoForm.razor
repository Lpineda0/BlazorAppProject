@page "/equipo/nueva"
@page "/equipo/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigator;
@inject IRepositorioEquipo _repositorio;
<h2>@_mensaje Equipo</h2>
<EditForm Model="_equipo" FormName="frmEquipo" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="row mb-3">
		<label for="txtNombre" class="col-2 col-form-label">Nombre</label>
		<div class="col-10">
			<InputText id="txtNombre" class="form-control" @bind-Value="_equipo.Nombre" />
			<ValidationMessage For="()=>_equipo.Nombre" />
		</div>
	</div>
	<div class="row mb-3">
		<label for="txtDescripcion" class="col-2 col-form-label">Descripcion</label>
		<div class="col-10">
			<InputText id="txtDescripcion" class="form-control" @bind-Value="_equipo.Descripcion" />
			<ValidationMessage For="()=>_equipo.Descripcion" />
		</div>
	</div>
	<button type="submit" class="btn btn-primary">Guardar</button>
	<button class="btn btn-danger ms-3" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }
	private string _mensaje = "";
	private Equipo? _equipo = new();

	protected override async Task OnInitializedAsync()
	{
		if (Id > 0)
		{
			_equipo = await _repositorio.Get(Id);
			_mensaje = "Modificar";

		}
		else
		{
			_mensaje = "Nueva";
		}
	}
	private async void Guardar()
	{
		if (Id > 0)
		{
			await _repositorio.Update(Id, _equipo!);
		}
		else
		{
			await _repositorio.Add(_equipo!);
		}
		Cancelar();
	}
	private void Cancelar()
	{
		_navigator.NavigateTo("/equipo");
	}
}